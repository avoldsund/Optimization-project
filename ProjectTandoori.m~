% Project Tandoori

function optimal = ProjectTandoori()

    rho = 1; E = 1; 
    M = 10; mu = 10^-4;
    A_top = 1; A_bottom = 10^-4; 


    problem = input('1 = Tower, 2 = Cantilever, 3 = Bridge\n');

    switch problem
        case 1
            n = 13;
            m = 58;
            ns = 4;     % number of fixed nodes (z = 0)

            % initial values:
            A = 0.8*ones(m,1);
            q = ones(m,1);
            f_supp = ones(3*ns,1);

            v = zeros(3,n);    % coordinates of node
            l = zeros(m,3);     % length of bars with index of nodes in v


            % Coordinates of v:
            x = [0, 1]; y = [0, 1]; z = [0, 1, 2];
            it = 1;
            for pen = 1:length(z)
                for j = 1:length(y)
                    for i = 1:length(x)
                        v(:,it) = [x(i); y(j); z(pen)];
                        it = it + 1;
                    end
                end
            end
            v(:,end) = [0.5; 0.5; 2.5];



            % Force on each node
            f_ext = spalloc(3 * (n - ns), 1, 0);
            % only non-zero ext load: top node [0.5, 0.5, 2.5] which is node n
            f_ext(end-2 : end) = [0; 0; -1];

            I_supp = [speye(3 * ns); spalloc(3 * (n - ns), 3 * ns, 0)];
            I_ext = [spalloc(3 * ns, 3 * (n - ns), 0); speye(3 * (n - ns))];

            force = I_supp * f_supp + I_ext * f_ext;


            % Length of bars [first node, second node, lenght]
            it = 1;
            for i = 1:n
                for j = i:n
                    if i ~= j && norm(v(:,i)-v(:,j)) <= sqrt(3)
                        l(it,:) = [i, j, norm(v(:,i)-v(:,j))];
                        it = it + 1;
                    end
                end
            end


            % Tau, vector of the bar's directional cosines:
            tau = zeros(3,m);
            for j = 1:m
                tau(:,j) = (v(:,l(j,1))-v(:,l(j,2)))/l(j,3);
            end



            % B-matrix:
            B = zeros(3*n, m);
            for i = 1:n
                for j = 1:m
                    for pen = 1:3

                        if l(j,1) == i
                            B(3*(i-1)+pen, j) = -tau(pen,j);     
                        elseif l(j,2) == i
                            B(3*(i-1)+pen, j) = tau(pen,j);
                        end

                    end
                end
            end



            % D-matrix

            D = @(A) spdiags(l(:,3)./(E*A),0,m,m);

            A_sum = sum((A-A_bottom).*(A_top-A));

            % Function evaluated at q, A:
            f = @(A,q) 0.5 * q'*D(A)*q - mu*log(M - rho*l(:,3)'*A) - mu*A_sum;

            % Calculation of gradient of f, dim 2m + 3ns:
            grad_f_A = @(A,q) -0.5*D(A)*(q.^2./A.^2) - (mu/(M-sum(rho*l(:,3).*A)))*rho*l(:,3)-mu*(2*A+A_bottom+A_top)./((A-A_bottom).*(A_top-A));
            grad_f_q = @(A,q) D(A)*q;
            grad_f_fsupp = zeros(3*ns,1);

            grad_f = @(A,q) [grad_f_A(A,q); grad_f_q(A,q); grad_f_fsupp];

            % Calculation of Hessian-components
            hess_f_AA = @(A,q) 1/4 *spdiags(D(A)*(q.^2./A.^3),0,m,m) - (mu/(M-sum(rho*l(:,3).*A))^2)*rho^2*l(:,3)*l(:,3)' + mu*(spdiags((1./(A-A_bottom).^2)+(1./(A_top-A).^2),0,m,m));
            hess_f_qA = @(A,q) -spdiags(D(A)*(q/A.^2),0,m,m);
            hess_f_fsuppA = zeros(m,3*ns);

            hess_f_Aq = @(A,q) hess_f_qA(A,q)';
            hess_f_qq = @(A,q) D(A);
            hess_f_fsuppq = zeros(m,3*ns);

            hess_f_Afsupp = hess_f_fsuppA';
            hess_f_qfsupp = hess_f_fsuppq';
            hess_f_fsuppfsupp = zeros(3*ns,3*ns);

            hess_f = @(A,q) [hess_f_AA(A,q) hess_f_qA(A,q) hess_f_fsuppA;
                            hess_f_Aq(A,q) hess_f_qq(A,q) hess_f_fsuppq;
                            hess_f_Afsupp hess_f_qfsupp hess_f_fsuppfsupp];

            % Constraint
            c = @(q, f_supp) B*q - I_supp*f_supp - I_ext*f_ext;

            % Jacobian matrix of the constraints:
           grad_c = [zeros(m, 3*n); B'; -I_supp'];


            newton = @(A,q) [hess_f(A,q) -grad_c;
                            grad_c' zeros(3*n)];

            % Vector in the newton's iteration
            s = @(A,q,f_supp) [-grad_f(A,q); -c(q,f_supp)];

            % Penalty Parameter (mu in book)
            pen = 0.5;


            alpha = 1;

            eta = 0.25;

            t = 0.5;
            
            
            
            while (M-sum(rho*l.*A)) > 0 && ~(find((A-A_bottom).*(A_top-A) < 0 ))
               
                if isValid(alpha,A,q,f_supp,pen,p,eta)
                    break
                   
                else
                   % Quadratic interpolation
                   
                   alpha_new = quadInterpol(alpha);
                end
                
                if isValid(alpha_new,A,q,f_supp,pen,p,eta)
                    alpha = alpha_new;
                    break
                else
                    
                    % Cubic interpolation
                    
                end
                    alpha_new = 
            end
    end
    
   
    function out = merit_D(A,q,f_supp,pen,p) 
        out = grad_f(A,q,f_supp)'*p - pen*abs(c(q,f_supp));
    end

    function out = merit(A,q,f_supp)
        out = f(A,q) + pen*abs(c(q,f_supp));
    end

    function res = isValid(alpha)
        if merit(A + alpha*p(1),q + alpha*p(2),f_supp + alpha*p(3),pen) > merit(A,q,f_supp,pen) + eta*alpha*merit_D(A,q,f_supp,pen,p)
            res = 0;
        else res = 1;
        end
    end
    
    function alpha_new = quadInterpol(alpha)
    alpha_new = - merit_D(A,q,f_supp,pen,p)*alpha^2/(2*(merit(A + alpha*p(1),q + alpha*p(2),f_supp + aplha*p(3),pen) - merit(A,q,f_supp,pen) - merit_D(A,q,f_supp,pen,p)*alpha));
    end



end
 
          
          
          
          
          